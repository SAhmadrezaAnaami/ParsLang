statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement	: KEYWORD:return expr?
			: KEYWORD:continue 
			: KEYWORD:break 
			: expr

expr    	: KEYWORD:var IDENTIFIER EQ expr
			: comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)*
		
comp-expr	: not comp-expr
			: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr 	: term ((PLUS|MINUS) term)*		

term    	: factor ((MUL|DIV|REMAIN) factor)*

factor  	: (PLUS|MINUS) factor
			: power

power   	: call (POW factor)*

call		: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom    	: INT|FLOAT|STRING|IDENTIFIER
			: LPAREN expr RPAREN
			: list-expr
			: if-expr
			: for-expr
			: while-expr
			: func-def

list-expr	: LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr		: KEYWORD:if expr KEYWORD:then
			  (statement if-expr-B|if-expr-C?)
			| (NEWLINE statements KEYWORD:end|if-expr-B|if-expr-C)

if-expr-B	: KEYWORD:elif expr KEYWORD:then
			  (statement if-expr-B|if-expr-C?)
			| (NEWLINE statements KEYWORD:end|if-expr-B|if-expr-C)

if-expr-C	: KEYWORD:else 
			  statement 
			| (NEWLINE statements KEYWORD:end) 

for-expr	: KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr
			  (KEYWORD:step expr)? KEYWORD:then 
			  statement
			| (NEWLINE statements KEYWORD:end)

while-expr 	: KEYWORD:while expr KEYWORD:then expr
			  statement
			| (NEWLINE statements KEYWORD:end)

func-def	: KEYWORD:fun IDENTIFIER?
			  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
			  (ARROW expr)
			| (NEWLINE statements KEYWORD:end)

